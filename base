import config_sis
import os
import sys
import json
import psycopg2
from psycopg2.extras import RealDictCursor
import re
import string
import graphene
from collections import namedtuple
__version__ = "3.0.1"
import base_t

# 2. Global
pg_conn = None
response_body = ""

# 3. PgSql


def pg_connect():
    global pg_conn, response_body

    try:
        pg_conn = config_sis.pgsis_analytics()
    except (Exception, psycopg2.DatabaseError) as error:
        response_body = "Notice: check DB Conn"

# 2. Query


class QueryEstandar(graphene.ObjectType):
    global pg_conn

    usuarios = graphene.List(
        base_t.TotalUsuarios, tipo_filter=graphene.String(), data_filter=graphene.String())

    def resolve_usuarios(self, info, tipo_filter, data_filter):
        return base_t.get_usuarios(pg_conn, tipo_filter, data_filter)


# 3. Mutation
class MutationEstandar(graphene.ObjectType):
    insert_pqrs = base_t.ModifyPqrsNewxx.Field()


# 4. Schemas
schema_estandar = graphene.Schema(
    query=QueryEstandar, mutation=MutationEstandar)


# 6. Service
def application(environ, start_response):
    global pg_conn, response_body
    response_body = ""

    try:
        pg_connect()

        if environ['REQUEST_METHOD'] == 'POST':
            request_body_size = int(environ.get('CONTENT_LENGTH', 0))
        else:
            request_body_size = 0
        request_body = environ['wsgi.input'].read(request_body_size)
        if request_body.decode('utf-8') != "":
            data_body = json.loads(request_body.decode('utf-8'))
            data_query = data_body.get('query', [''])
            data_variables = data_body.get('variables', [''])
            result = schema_estandar.execute(
                data_query, variables=data_variables)
            response_body = json.dumps(
                result.data, indent=2, sort_keys=True, default=str)
            response_body = "{\"data\": "+response_body+"}"
        else:
            response_body = "{\"data\": { \"registro\": [ { \"__typename\": \"\", \"descripcion\": \"\" } ] } }"
    except (Exception, psycopg2.DatabaseError) as error:
        request_body_size = 0
        response_body = error
    finally:
        if pg_conn is not None:
            pg_conn.close()

    status = '200 OK'

    response_headers = [
        ('Access-Control-Allow-Origin', '*'),
        ('Content-Type', 'application/json;charset=utf-8'),
        ('Access-Control-Allow-Methods',
         'X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method'),
        ('Access-Control-Allow-Headers',
         'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'),
        ('Allow', 'GET, POST, PUT, DELETE'),
        ('Content-Length', str(len(response_body)))
    ]

    start_response(status, response_headers)
    response_body = bytes(response_body, encoding='utf-8')
    return [response_body]
